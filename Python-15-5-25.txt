1. *Armstrong Number Check*
   Without using string or list, check if a number is an Armstrong number (e.g., 153 → $1^3 + 5^3 + 3^3 = 153$).

  num=int(input())
  def armstrong_num(num):
    temp=num
    c=0
    while temp>0:
        c+=1 
        temp//=10 
    r=c
    temp1=num
    sum=0
    while temp1>0:
        digit=temp1%10 
        power=1
        for i in range(r):
            power=power*digit 
        temp1//=10
        sum+=power
    if(sum==num):
        return("Armstrong num")
    else:
        return("Not")
 print(armstrong_num(num))

2. *Prime Digit Count*
   Count how many digits in a number are prime (2, 3, 5, 7). Do this without converting to string or using arrays.

  num = int(input("Enter: "))
  def prime_count(num):
    count = 0
    while num>0:
        digit=num%10
        if(digit==2) or digit==3 or digit==5 or digit==7:
            count+=1 
        num//=10
    return(count)
  print(prime_count(num))

3. *Number Pyramid with Arithmetic Pattern*
   Print a triangle of numbers like:
   1  
   2 3  
   4 5 6  
   7 8 9 10  
  up to n rows using loops only.

  num=int(input())
  def pyramid(num):
      n=1
      for i in range(1,num+1):
          for j in range(i):
              print(n,end=" ")
              n+=1
          print( )
  pyramid(num)

4. *Print all prime numbers in a range without using any collections or strings.*

  num=int(input())
  def prime_num(num):
      for i in range(2,num+1):
          c=0
          for j in range(2,i):
              if(i%j==0):
                  c+=1
          if(c==0):
              print(i)
prime_num(num)

5. *Find GCD and LCM of two integers using only loops and conditionals.*

a=int(input())
b=int(input())
def gcd_lcm(num1,num2):
    gcd=1
    min_n=a if a<b else b 
    for i in range(1,min_n+1):
        if(a%i==0)and(b%i==0):
            gcd=i 
    lcm=a*b 
    for i in range(1,lcm+1):
        if(i%a==0)and(i%b==0):
            lcm=i 
            break
    print(gcd)
    print(lcm)
gcd_lcm(a,b)

#print 1 to 5 tables using loops 

n=int(input())
i=1
while i<=n:
    j=1
    while j<=10:
        print(i,"*",j,"=",(i*j))
        j+=1
    print()
    i+=1


#print this pattern

n=int(input())
i=1
while i<=n:
    if(i%2==0):
        j=1
        while j<=i:
            print(i)
            j+=1
    else:
        print(i)
    i+=1


#Multiplication Table (1 to 10)
Write a Python program using nested loops to print the multiplication tables from 1 to 10.
Example Output (partially shown)
1 x 1 = 1
1 x 2 = 2
...
10 x 10 = 100

--  n=int(input())
    for i in range(1,n+1):
    	 for j in range(1,11):
             print(i,"*",j,"=",(i*j))
         print()

#Count Prime Numbers in a Range (1 to 100)
Using nested loops, count how many prime numbers exist between 1 and 100.
Hint : A number is prime if it’s only divisible by 1 and itself.

-- n = int(input())
   count = 0  
   for i in range(2, n + 1):
       c = 0
       for j in range(2, i):
           if i % j == 0:
               c = c + 1
       if c == 0:
           count += 1  
    print("Total prime numbers:", count)


#Print All Pairs of Numbers (1 to n) Where Sum is Even
Ask the user to enter a number n. Using nested loops, print all pairs (i, j) from 1 to n where the sum i + j is even.
Example for n = 3:
(1,1)
(1,3)
(2,2)
(3,1)
(3,3)

-- n=int(input())
   for i in range(1,n+1):
       for j in range(1,i+1):
           if((i+j)%2==0):
               print(i,j)

#Count Total Factors of All Numbers from 1 to n
Ask the user to enter a number n. Use nested loops to find how many total factors (divisors) exist for all numbers from 1 to n.
Example for n = 4
1 → 1
2 → 1, 2
3 → 1, 3
4 → 1, 2, 4
Total = 8 factors

-- n = int(input())
   total_factors = 0
   for i in range(1, n + 1):       
       for j in range(1, i + 1):    
           if i % j == 0:
               total_factors += 1   
   print("Total number of factors: ", total_factors)